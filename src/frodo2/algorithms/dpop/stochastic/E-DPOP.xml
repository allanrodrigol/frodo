<!-- 
FRODO: a FRamework for Open/Distributed Optimization
Copyright (C) 2008-2019  Thomas Leaute, Brammert Ottens & Radoslaw Szymanek

FRODO is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FRODO is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


How to contact the authors: 
<https://frodo-ai.tech>
-->

<!-- Overall definition of the agent
	- measureTime: whether the simulated time metric should be enabled instead of just measuring wall clock time
	- measureMsgs: whether to measure the number of messages and the total amount of information sent (WARNING! This is computationally expensive)
 -->
<agentDescription className = "frodo2.algorithms.SingleQueueAgent" measureTime = "true" measureMsgs = "false" >
	
	<!-- The MailMan used when measuring time
		 - mailmanClass: the class of the mailman to be used
	-->
	<mailman mailmanClass = "frodo2.communication.mailer.CentralMailer"/>
	
	<!-- The XCSP parser
		- parserClass: the class of the parser/subsolver to be used. Currently supported:
			- frodo2.algorithms.XCSPparser: the default parser that does not consider local subproblems
		- displayGraph: if true, displays the constraint graph in DOT format (default = false)
		- domClass: the class to be used for variable values; the supported values are: 
			- frodo2.solutionSpaces.AddableInteger 	(default) for integer-valued variables
			- frodo2.solutionSpaces.AddableReal 		for (finite-domain) real-valued variables
		- utilClass: the class to be used for utility values. For E[DPOP], must be AddableReal. 
		- DOTrenderer: the class to be used to display the constraint graph. Supported values:
			- empty string: displays the constraint graph in DOT format in the console; 
			- frodo2.gui.DOTrenderer: renders the constraint graph in a new window. Assumes that Graphviz' "dot" command is on the shell path. 
		- countNCCCs: whether Non-Concurrent Constraint Checks should be counted (default = false)
	 -->
	<parser parserClass = "frodo2.algorithms.XCSPparser" 
			displayGraph = "true" 
			domClass = "frodo2.solutionSpaces.AddableInteger" 
			utilClass = "frodo2.solutionSpaces.AddableReal"
			DOTrenderer = ""
			countNCCCs = "false" />

	<!-- A set of modules, each being parameterized by the following attributes: 
		- className: the name of the class implementing the module
		- reportStats (only for StatsReporter modules): whether statistics should be reported to the central controller, if any (default = false)
		- messages (optional): a list of "message" elements, each parameterized by the following attributes: 
			- name: the name of the public static String field in the module that identifies the message
			- value: the type to be used for that message
			- ownerClass (optional): if present, specifies the name of a class, and the attribute "value" is then interpreted as a public static String field of that class
	 -->
	<modules>
		
		<!-- Collects and reports the solution found -->
		<module className = "frodo2.algorithms.SolutionCollector" 
				reportStats = "true" />
		
		<!-- Constructs a DFS pseudo-tree for each connected component of the constraint graph, taking care of root election 
			- DOTrenderer: the class to be used to display the DFS. Supported values:
				- empty string: displays the DFS in DOT format in the console; 
				- frodo2.gui.DOTrenderer: renders the DFS in a new window. Assumes that Graphviz' "dot" command is on the shell path. 
		-->
		<module className = "frodo2.algorithms.varOrdering.dfs.DFSgenerationParallel" 
				reportStats = "false"
				DOTrenderer = "">

			<!-- The heuristic used to choose the root variable. The following heuristics are available:
				- frodo2.algorithms.heuristics.VarNameHeuristic 								(default) elects the variable with the lexicographically largest name.
				- frodo2.algorithms.heuristics.MostConnectedHeuristic 						elects the most connected variable. 
				- frodo2.algorithms.heuristics.LeastConnectedHeuristic 						elects the least connected variable. 
				- frodo2.algorithms.heuristics.SmallestDomainHeuristic 						elects the variable with smallest domain.  
				- frodo2.algorithms.heuristics.RandScoringHeuristic 							elects a random variable. 
				- frodo2.algorithms.varOrdering.dfs.LocalRandVarsDFS$VarElectionHeuristic 	elects the variable with the smallest number of neighboring random variables. 
				- frodo2.algorithms.heuristics.ScoringHeuristicWithTiebreaker 				can combine two heuristics, the second being used to break ties.
			 -->
			<rootElectionHeuristic className = "frodo2.algorithms.heuristics.ScoringHeuristicWithTiebreaker" >
				<heuristic1 className = "frodo2.algorithms.heuristics.MostConnectedHeuristic" />
				<heuristic2 className = "frodo2.algorithms.heuristics.ScoringHeuristicWithTiebreaker" >
					<heuristic1 className = "frodo2.algorithms.heuristics.SmallestDomainHeuristic" />
					<heuristic2 className = "frodo2.algorithms.heuristics.VarNameHeuristic" />
				</heuristic2>
			</rootElectionHeuristic>
			
			<!-- The underlying DFS Generation module 
				 It is also possible to use LocalRandVarsDFS, which attempts to avoid putting, on the path between a variable linked to random variable r and lca(r), a variable that is not linked to r. 
			-->
			<dfsGeneration 	className = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" 
							withSharedVars = "true" >
				
				<!-- The heuristic suggesting which variables should be highest in the DFS tree. The following heuristics are available:
					- frodo2.algorithms.varOrdering.dfs.DFSgeneration$BlindScoringHeuristic 		(default) uses only local information given by a ScoringHeuristic among the following:
						- frodo2.algorithms.heuristics.VarNameHeuristic 						(default) elects the variable with the lexicographically largest name.
						- frodo2.algorithms.heuristics.SmallestDomainHeuristic 				elects the variable with smallest domain.  
						- frodo2.algorithms.heuristics.RandScoringHeuristic 					elects a random variable. 
						- frodo2.algorithms.heuristics.ScoringHeuristicWithTiebreaker 		can combine two heuristics, the second being used to break ties.
					- frodo2.algorithms.varOrdering.dfs.DFSgeneration$ScoreBroadcastingHeuristic 	uses information sent by neighbors based on a ScoringHeuristic among the previous and the following:
						- frodo2.algorithms.heuristics.MostConnectedHeuristic 				elects the most connected variable. 
						- frodo2.algorithms.heuristics.LeastConnectedHeuristic 				elects the least connected variable. 
		 		 -->
				<dfsHeuristic className = "frodo2.algorithms.varOrdering.dfs.DFSgeneration$ScoreBroadcastingHeuristic" >
					<scoringHeuristic className = "frodo2.algorithms.heuristics.ScoringHeuristicWithTiebreaker" >
						<heuristic1 className = "frodo2.algorithms.heuristics.MostConnectedHeuristic" />
						<heuristic2 className = "frodo2.algorithms.heuristics.SmallestDomainHeuristic" />
					</scoringHeuristic>
				</dfsHeuristic>
			
				<messages>
					<message myFieldName = "START_MSG_TYPE" 
							 targetFieldName = "START_AGENT" 
							 targetClass = "frodo2.algorithms.AgentInterface" />
					<message myFieldName = "ROOT_VAR_MSG_TYPE" 
							 targetFieldName = "OUTPUT_MSG_TYPE" 
							 targetClass = "frodo2.algorithms.varOrdering.election.LeaderElectionMaxID" />
 					<message myFieldName = "FINISH_MSG_TYPE" 
							 targetFieldName = "AGENT_FINISHED" 
							 targetClass = "frodo2.algorithms.AgentInterface" />
				</messages>
			</dfsGeneration>
			
			<messages>
				<message myFieldName = "START_MSG_TYPE" 
						 targetFieldName = "START_AGENT" 
						 targetClass = "frodo2.algorithms.AgentInterface" />
			</messages>
		</module>
		
		<!-- Samples the probability spaces of the random variables in the problem 
			Three modes are available, specifying where the sampling takes place: $AtLeaves, $AtLCAs and $AtRoots. 
			- nbrSamples: how many samples should be used to approximate each probability space. If 0, the exact probability spaces are used 
			- whereToProject: tells the sampling phase where the projection of the sampled random variables should take place 
			(by default, projection and sampling are performed at the same place)
				- leaves: ignored if sampling is performed at the roots
				- lcas: only available if sampling is also performed at the lcas 
				- roots: only available if sampling is also performed at the roots 
			- DOTrenderer: the class to be used to display the DFS. Supported values:
				- empty string: displays the DFS in DOT format in the console; 
				- frodo2.gui.DOTrenderer: renders the DFS in a new window. Assumes that Graphviz' "dot" command is on the shell path. 
		 -->
		<module className = "frodo2.algorithms.dpop.stochastic.SamplingPhase$AtLCAs" 
				reportStats = "true" 
				nbrSamples = "0" 
				whereToProject = "leaves"
				DOTrenderer = "">
			<messages>
				<message myFieldName = "START_MSG_TYPE" 
						 targetFieldName = "START_AGENT" 
						 targetClass = "frodo2.algorithms.AgentInterface" />
				<message myFieldName = "DFS_MSG_TYPE" 
						 targetFieldName = "OUTPUT_MSG_TYPE" 
						 targetClass = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" />
			</messages>
		</module>
		
		<!-- E[DPOP]'s UTIL propagation phase
			- probOfOptimality (default = false): whether to report the probability of optimality of the solution found. WARNING: this can be computationally expensive to compute. 
			- method: "expectation", "expectationMonotone", "consensus" or "consensusAllSols" (default is "expectation")
				This attribute must be consistent with the attribute whereToProject in the module SamplingPhase$AtLeaves. 
		 -->
		<module className = "frodo2.algorithms.dpop.stochastic.ExpectedUTIL" 
				reportStats = "true" 
				probOfOptimality = "false" 
				method = "expectation" >
			<messages>
				<message myFieldName = "START_MSG_TYPE" 
						 targetFieldName = "START_AGENT" 
						 targetClass = "frodo2.algorithms.AgentInterface" />
				<message myFieldName = "DFS_MSG_TYPE" 
						 targetFieldName = "OUTPUT_MSG_TYPE" 
						 targetClass = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" />
				<message myFieldName = "RAND_VARS_PROJ_MSG_TYPE" 
						 targetFieldName = "RAND_VARS_PROJ_MSG_TYPE" 
						 targetClass = "frodo2.algorithms.dpop.stochastic.SamplingPhase" />
			</messages>
		</module>
		
		<!-- Propagates the optimal value assignments top down following the DFS -->
		<module className = "frodo2.algorithms.dpop.VALUEpropagation" >
			<messages>
				<message myFieldName = "START_MSG_TYPE" 
						 targetFieldName = "START_AGENT" 
						 targetClass = "frodo2.algorithms.AgentInterface" />
				<message myFieldName = "DFS_MSG_TYPE" 
						 targetFieldName = "OUTPUT_MSG_TYPE" 
						 targetClass = "frodo2.algorithms.varOrdering.dfs.DFSgeneration" />
				<message myFieldName = "UTIL_MSG_TYPE" 
						 targetFieldName = "OUTPUT_MSG_TYPE" 
						 targetClass = "frodo2.algorithms.dpop.UTILpropagation" />
				<message myFieldName = "SEPARATOR_MSG_TYPE" 
						 targetFieldName = "SEPARATOR_MSG_TYPE" 
						 targetClass = "frodo2.algorithms.dpop.UTILpropagation" />
			</messages>
		</module>
		
		<!-- Displays the messages exchanged
			- perAgent: if true, each agent reports itself the messages it exchanges 
				WARNING! This can significantly affect runtime performance. Only use this setting for debugging purposes. 
			- hideSystemMessages: whether to display system messages (default: true)
		 	- visualizer: the class of the Visualizer to be used; supported values: 
		 		- [empty string]: no visualizer; messages are not displayed
		 		- frodo2.gui.ConsoleVisualizer: messages are printed out in the console
		 		- frodo2.gui.jung.JungVisualizer: a visualizer based on JUNG2
		 -->
		<module className = "frodo2.algorithms.test.MessageDebugger" 
				perAgent = "false" 
		 		hideSystemMessages = "true" 
		 		visualizer = "" />
		 
	</modules>
</agentDescription>